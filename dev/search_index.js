var documenterSearchIndex = {"docs":
[{"location":"#Utility.jl","page":"Utility.jl","title":"Utility.jl","text":"","category":"section"},{"location":"","page":"Utility.jl","title":"Utility.jl","text":"This module holds simple functions that do not yet have a better home or alternatives.","category":"page"},{"location":"","page":"Utility.jl","title":"Utility.jl","text":"Copyright (c) 2022 Mechanomy LLC, released under the MIT license.","category":"page"},{"location":"#Installation","page":"Utility.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"Utility.jl","title":"Utility.jl","text":"using Pkg\nPkg.add(url=\"https://github.com/mechanomy/Utility.jl.git\")","category":"page"},{"location":"#API","page":"Utility.jl","title":"API","text":"","category":"section"},{"location":"","page":"Utility.jl","title":"Utility.jl","text":"CurrentModule= Utility","category":"page"},{"location":"","page":"Utility.jl","title":"Utility.jl","text":"Modules=[Utility]","category":"page"},{"location":"#Utility.Utility","page":"Utility.jl","title":"Utility.Utility","text":"Convenience functions not found elsewhere.\n\n\n\n\n\n","category":"module"},{"location":"#Utility.Angle","page":"Utility.jl","title":"Utility.Angle","text":"Union type for angular units.\n\n\n\n\n\n","category":"type"},{"location":"#Utility.chirpLinear","page":"Utility.jl","title":"Utility.chirpLinear","text":"chirpLinear(start::Unitful.Frequency, stop::Unitful.Frequency, duration::Unitful.Time, amplitude::Number, offset::Number=0, phase=0u\"Â°\", ts::Unitful.Time = 1e-3u\"s\", timeStart::Unitful.Time=0u\"s\")\n\nCreates a chirp signal from start to stop frequencies over duration time on timestep ts with amplitude about offset, shifted by phase and timeStart\n\n\n\n\n\n","category":"function"},{"location":"#Utility.eqTol","page":"Utility.jl","title":"Utility.eqTol","text":"eqTol(A::AbstractMatrix, B::AbstractMatrix) -> Bool\neqTol(A::AbstractMatrix, B::AbstractMatrix, tol) -> Bool\n\n\nReturns true if every element A and B are equal within tol.\n\n\n\n\n\n","category":"function"},{"location":"#Utility.eqTol-2","page":"Utility.jl","title":"Utility.eqTol","text":"eqTol(a::Number, b::Number) -> Bool\neqTol(a::Number, b::Number, tol) -> Bool\n\n\nReturns true if a == b within tol.  Prefer using Base.isapprox\n\n\n\n\n\n","category":"function"},{"location":"#Utility.eqTol-3","page":"Utility.jl","title":"Utility.eqTol","text":"eqTol(a::Unitful.Quantity, b::Unitful.Quantity, tol=1e-3)::Bool\n\nReturns true if a == b within tol.  Prefer using Base.isapprox\n\n\n\n\n\n","category":"function"},{"location":"#Utility.iNext-Tuple{Integer, Integer}","page":"Utility.jl","title":"Utility.iNext","text":"iNext(i::Integer, n::Integer) -> Integer\n\n\nGiven n elements in an array, return the next i+1 element after i, wrapping around 0 if necessary.\n\nUtility.iNext(1,5) == 2\nUtility.iNext(5,5) == 1\nUtility.iNext(6,2) == 1\nUtility.iNext(-6,5) == 0\n\n\n\n\n\n","category":"method"},{"location":"#Utility.iWrap-Tuple{Integer, Integer}","page":"Utility.jl","title":"Utility.iWrap","text":"iWrap(i::Integer, n::Integer) -> Integer\n\n\nGiven n elements in an array, wrap i around to 1 if it exceeds n.\n\nUtility.iWrap(1,5) == 1\nUtility.iWrap(5,5) == 5\nUtility.iWrap(6,5) == 1\nUtility.iWrap(-6,5) == -1\n\n\n\n\n\n","category":"method"},{"location":"#Utility.stringTable","page":"Utility.jl","title":"Utility.stringTable","text":"stringTable(strings::Vector{String}, lengthEach::Integer=3, separator::String=\"\")::String   Regularizes the strings vector by truncating each string to lengthEach then concatenating into one string, separated by separator.\n\nUtility.stringTable([\"abc\",\"defghi\",\"jk\",\"lmnopq\"], 4, \"|\") == \" abc|defg|  jk|lmno\"\nUtility.stringTable([\"abcdef\",\"ghi\",\"jkl\",\"mnopq\"], 4, \"|\") == \"abcd| ghi| jkl|mnop\"\n\n\n\n\n\n","category":"function"},{"location":"#Utility.within-Tuple{Number, Number, Number}","page":"Utility.jl","title":"Utility.within","text":"within(low::Number, value::Number, high::Number) -> Bool\n\n\nReturns true if low <= value <= high.\n\n\n\n\n\n","category":"method"}]
}
